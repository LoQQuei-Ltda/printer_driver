using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Runtime.Versioning;
using System.Security.Principal;

namespace PrintRedirector
{
    [SupportedOSPlatform("windows")]
    class Program
    {
        private static string appDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "PrintRedirector");
        private static string logFile = Path.Combine(appDataPath, "print_log.txt");
        private static int totalPageCount = 0;
        private static DateTime lastApiCheck = DateTime.MinValue;
        private static bool isLoggedIn = false;
        private static string currentUser = "";
        private static List<PrinterInfo> availablePrinters = new List<PrinterInfo>();
        private static bool isMonitoring = false;
        private static CancellationTokenSource monitorCancellation;
        private static string pdfMonitorFolder = Path.Combine(appDataPath, "pdfs_monitor");
        private static FileSystemWatcher folderWatcher;

        // Mock do estado da aplicação
        private static string mockApiUrl = "https://api.exemplo.com/printers"; // URL fictícia
        private static string mockUsername = "usuario";
        private static string mockPassword = "senha123";
        private static string defaultVirtualPrinter = "Microsoft Print to PDF";
        private static string defaultRedirectPrinter = "LoQQuei Printer (\\\\10.148.1.8\\PDF)";

        static async Task Main(string[] args)
        {
            // Configurar diretório
            SetupDirectories();

            // Exibir título e informações
            Console.Title = "Sistema de Redirecionamento de Impressões";
            WriteColoredLine("=== SISTEMA DE REDIRECIONAMENTO DE IMPRESSÕES ===", ConsoleColor.Cyan);
            WriteColoredLine($"Log em: {logFile}", ConsoleColor.Gray);
            WriteColoredLine($"Total de páginas impressas: {totalPageCount}", ConsoleColor.Green);
            Console.WriteLine();

            // Menu principal
            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("----------------------------------");
                WriteColoredLine("MENU PRINCIPAL", ConsoleColor.Yellow);
                
                // Mostrar status de login
                if (isLoggedIn)
                {
                    WriteColoredLine($"Usuário: {currentUser} (Conectado)", ConsoleColor.Green);
                }
                else
                {
                    WriteColoredLine("Usuário: Não conectado", ConsoleColor.Red);
                }

                // Mostrar status de monitoramento
                if (isMonitoring)
                {
                    string virtualPrinter = availablePrinters.FirstOrDefault(p => p.IsSelected && p.IsVirtual)?.Name ?? "N/A";
                    string redirectPrinter = availablePrinters.FirstOrDefault(p => p.IsRedirectTarget)?.Name ?? "N/A";
                    WriteColoredLine($"Monitoramento: ATIVO ({virtualPrinter} -> {redirectPrinter})", ConsoleColor.Green);
                }
                else
                {
                    WriteColoredLine("Monitoramento: INATIVO", ConsoleColor.Red);
                }

                Console.WriteLine("----------------------------------");
                Console.WriteLine("1. Login");
                Console.WriteLine("2. Listar impressoras disponíveis");
                Console.WriteLine("3. Atualizar lista de impressoras");
                Console.WriteLine("4. Criar impressora virtual");
                Console.WriteLine("5. Configurar impressoras para monitoramento");
                Console.WriteLine("6. Iniciar monitoramento");
                Console.WriteLine("7. Parar monitoramento");
                Console.WriteLine("8. Exibir arquivo de log");
                Console.WriteLine("9. Sair");
                Console.Write("\nEscolha uma opção: ");

                string option = Console.ReadLine();
                Console.Clear();

                switch (option)
                {
                    case "1":
                        await LoginAsync();
                        break;
                    case "2":
                        ListPrinters();
                        break;
                    case "3":
                        await RefreshPrintersAsync();
                        break;
                    case "4":
                        await CreateVirtualPrinterAsync();
                        break;
                    case "5":
                        ConfigurePrinters();
                        break;
                    case "6":
                        StartMonitoring();
                        break;
                    case "7":
                        StopMonitoring();
                        break;
                    case "8":
                        ShowLogFile();
                        break;
                    case "9":
                        exit = true;
                        if (isMonitoring)
                        {
                            WriteColoredLine("Parando monitoramento antes de sair...", ConsoleColor.Yellow);
                            StopMonitoring();
                        }
                        WriteColoredLine("Encerrando aplicação. Obrigado!", ConsoleColor.Cyan);
                        break;
                    default:
                        WriteColoredLine("Opção inválida. Tente novamente.", ConsoleColor.Red);
                        break;
                }

                if (!exit)
                {
                    Console.WriteLine("\nPressione qualquer tecla para continuar...");
                    Console.ReadKey();
                    Console.Clear();
                }
            }
        }

        private static void SetupDirectories()
        {
            try
            {
                if (!Directory.Exists(appDataPath))
                {
                    Directory.CreateDirectory(appDataPath);
                    Console.WriteLine($"Diretório criado: {appDataPath}");
                }

                if (!File.Exists(logFile))
                {
                    File.WriteAllText(logFile, "=== REGISTRO DE IMPRESSÕES ===\r\n");
                    Console.WriteLine($"Arquivo de log criado: {logFile}");
                }

                // Carregar contagem total de páginas se existir
                if (File.Exists(logFile))
                {
                    string[] lines = File.ReadAllLines(logFile);
                    foreach (string line in lines)
                    {
                        if (line.Contains("Total acumulado:"))
                        {
                            int startIdx = line.LastIndexOf("Total acumulado:") + "Total acumulado:".Length;
                            string countStr = line.Substring(startIdx).Trim();
                            if (int.TryParse(countStr, out int count))
                            {
                                totalPageCount = count;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro ao configurar diretórios: {ex.Message}", ConsoleColor.Red);
            }
        }

        private static async Task LoginAsync()
        {
            WriteColoredLine("=== LOGIN ===", ConsoleColor.Cyan);
            
            Console.Write("Usuário (padrão: usuario): ");
            string username = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(username))
            {
                username = mockUsername;
                Console.WriteLine($"Usando usuário padrão: {username}");
            }

            Console.Write("Senha (padrão: senha123): ");
            string password = ReadPassword();
            if (string.IsNullOrWhiteSpace(password))
            {
                password = mockPassword;
                Console.WriteLine($"Usando senha padrão");
            }

            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            {
                WriteColoredLine("Usuário e senha são obrigatórios.", ConsoleColor.Red);
                return;
            }

            WriteColoredLine("Conectando ao servidor...", ConsoleColor.Yellow);

            try
            {
                // Simulação de atraso de rede
                await Task.Delay(1500);

                // Mock de validação
                if (username == mockUsername && password == mockPassword)
                {
                    isLoggedIn = true;
                    currentUser = username;
                    WriteColoredLine($"Login efetuado como {username}", ConsoleColor.Green);
                    LogMessage($"Login efetuado como {username}");

                    // Atualizar lista de impressoras automaticamente após login
                    await RefreshPrintersAsync();
                }
                else
                {
                    WriteColoredLine("Usuário ou senha inválidos", ConsoleColor.Red);
                    LogMessage("Falha no login: credenciais inválidas");
                }
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro no login: {ex.Message}", ConsoleColor.Red);
                LogMessage($"Erro no login: {ex.Message}");
            }
        }

        private static void ListPrinters()
        {
            if (!isLoggedIn)
            {
                WriteColoredLine("É necessário fazer login primeiro.", ConsoleColor.Red);
                return;
            }

            WriteColoredLine("=== IMPRESSORAS DISPONÍVEIS ===", ConsoleColor.Cyan);
            
            if (availablePrinters.Count == 0)
            {
                WriteColoredLine("Nenhuma impressora encontrada. Atualize a lista primeiro.", ConsoleColor.Yellow);
                return;
            }

            Console.WriteLine();
            Console.WriteLine("IMPRESSORAS VIRTUAIS:");
            Console.WriteLine("---------------------");
            int virtualCount = 0;
            foreach (var printer in availablePrinters.Where(p => p.IsVirtual))
            {
                string status = printer.IsSelected ? " [MONITORANDO]" : "";
                WriteColoredLine($"- {printer.Name}{status} ({printer.Location})", printer.IsSelected ? ConsoleColor.Green : ConsoleColor.Gray);
                virtualCount++;
            }
            
            if (virtualCount == 0)
            {
                WriteColoredLine("Nenhuma impressora virtual encontrada.", ConsoleColor.Yellow);
            }

            Console.WriteLine();
            Console.WriteLine("IMPRESSORAS FÍSICAS:");
            Console.WriteLine("--------------------");
            int physicalCount = 0;
            foreach (var printer in availablePrinters.Where(p => !p.IsVirtual))
            {
                string status = printer.IsRedirectTarget ? " [DESTINO]" : "";
                WriteColoredLine($"- {printer.Name}{status} ({printer.Location})", printer.IsRedirectTarget ? ConsoleColor.Green : ConsoleColor.Gray);
                physicalCount++;
            }
            
            if (physicalCount == 0)
            {
                WriteColoredLine("Nenhuma impressora física encontrada.", ConsoleColor.Yellow);
            }
        }

        private static async Task RefreshPrintersAsync()
        {
            if (!isLoggedIn)
            {
                WriteColoredLine("É necessário fazer login primeiro.", ConsoleColor.Red);
                return;
            }

            WriteColoredLine("Consultando impressoras disponíveis...", ConsoleColor.Yellow);

            try
            {
                // Simulação de atraso de rede
                await Task.Delay(2000);

                // Mock da lista de impressoras - em produção, isso viria da API
                availablePrinters = new List<PrinterInfo>
                {
                    new PrinterInfo { Name = "Impressora Departamento RH", IsVirtual = false, Location = "2º andar", Status = "Disponível" },
                    new PrinterInfo { Name = "Impressora Financeiro", IsVirtual = false, Location = "Térreo", Status = "Disponível" },
                    new PrinterInfo { Name = "Impressora TI", IsVirtual = false, Location = "3º andar", Status = "Disponível" },
                    new PrinterInfo { Name = "Impressora Diretoria", IsVirtual = false, Location = "10º andar", Status = "Disponível" },
                    new PrinterInfo { Name = "LoQQuei Printer (\\\\10.148.1.8\\PDF)", IsVirtual = false, Location = "Rede", Status = "Disponível" },
                    new PrinterInfo { Name = "Microsoft Print to PDF", IsVirtual = true, Location = "Local", Status = "Disponível" }
                };

                // Verificar impressoras já criadas no sistema
                try
                {
                    Process process = new Process();
                    process.StartInfo.FileName = "wmic";
                    process.StartInfo.Arguments = "printer get name";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.Start();

                    string output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();

                    string[] lines = output.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    
                    // Pular a primeira linha (cabeçalho)
                    for (int i = 1; i < lines.Length; i++)
                    {
                        string printerName = lines[i].Trim();
                        if (!string.IsNullOrEmpty(printerName) && 
                            !availablePrinters.Any(p => p.Name == printerName))
                        {
                            availablePrinters.Add(new PrinterInfo
                            {
                                Name = printerName,
                                IsVirtual = printerName.Contains("Virtual") || printerName.Contains("PDF") || printerName.Contains("XPS"),
                                Location = "Local",
                                Status = "Disponível"
                            });
                        }
                    }
                }
                catch (Exception ex)
                {
                    WriteColoredLine($"Erro ao obter impressoras do sistema: {ex.Message}", ConsoleColor.Red);
                    LogMessage($"Erro ao obter impressoras do sistema: {ex.Message}");
                }
                
                // Definir impressoras padrão se não houver nenhuma selecionada
                if (!availablePrinters.Any(p => p.IsSelected) && !string.IsNullOrEmpty(defaultVirtualPrinter))
                {
                    var virtualPrinter = availablePrinters.FirstOrDefault(p => p.Name.Contains(defaultVirtualPrinter));
                    if (virtualPrinter != null)
                    {
                        virtualPrinter.IsSelected = true;
                    }
                }
                
                if (!availablePrinters.Any(p => p.IsRedirectTarget) && !string.IsNullOrEmpty(defaultRedirectPrinter))
                {
                    var redirectPrinter = availablePrinters.FirstOrDefault(p => p.Name.Contains(defaultRedirectPrinter));
                    if (redirectPrinter != null)
                    {
                        redirectPrinter.IsRedirectTarget = true;
                    }
                }

                WriteColoredLine($"Encontradas {availablePrinters.Count} impressoras", ConsoleColor.Green);
                LogMessage($"Lista de impressoras atualizada: {availablePrinters.Count} impressoras encontradas");

                // Atualizar timestamp
                lastApiCheck = DateTime.Now;
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro ao consultar impressoras: {ex.Message}", ConsoleColor.Red);
                LogMessage($"Erro ao consultar impressoras: {ex.Message}");
            }
        }

        private static async Task CreateVirtualPrinterAsync()
        {
            if (!isLoggedIn)
            {
                WriteColoredLine("É necessário fazer login primeiro.", ConsoleColor.Red);
                return;
            }

            WriteColoredLine("=== CRIAR IMPRESSORA VIRTUAL COM MONITORAMENTO ===", ConsoleColor.Cyan);
            
            // Configurar diretório para monitoramento
            try
            {
                if (!Directory.Exists(pdfMonitorFolder))
                {
                    Directory.CreateDirectory(pdfMonitorFolder);
                }
                
                WriteColoredLine($"Diretório de monitoramento: {pdfMonitorFolder}", ConsoleColor.Yellow);
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro ao criar diretório de monitoramento: {ex.Message}", ConsoleColor.Red);
                return;
            }
            
            // Usar a impressora PDF padrão do Windows
            string printerName = "Microsoft Print to PDF";
            
            // Verificar se a impressora PDF existe
            bool pdfPrinterExists = PrinterExists(printerName);
            
            if (!pdfPrinterExists)
            {
                WriteColoredLine("ERRO: A impressora 'Microsoft Print to PDF' não foi encontrada no sistema.", ConsoleColor.Red);
                WriteColoredLine("Esta abordagem requer a impressora PDF padrão do Windows.", ConsoleColor.Yellow);
                return;
            }
            
            WriteColoredLine($"Impressora '{printerName}' encontrada!", ConsoleColor.Green);
            WriteColoredLine("Esta abordagem usa a impressora PDF padrão do Windows com um diretório monitorado.", ConsoleColor.Yellow);
            WriteColoredLine("INSTRUÇÕES DE USO:", ConsoleColor.Cyan);
            WriteColoredLine("1. Imprima para 'Microsoft Print to PDF'", ConsoleColor.White);
            WriteColoredLine($"2. Salve os arquivos PDF no diretório: {pdfMonitorFolder}", ConsoleColor.White);
            WriteColoredLine("3. O sistema detectará automaticamente novos PDFs e redirecionará para a impressora configurada", ConsoleColor.White);
            
            // Adicionar/atualizar a impressora PDF na lista
            var existingPrinter = availablePrinters.FirstOrDefault(p => p.Name == printerName);
            if (existingPrinter == null)
            {
                availablePrinters.Add(new PrinterInfo
                {
                    Name = printerName,
                    IsVirtual = true,
                    Location = "Local",
                    Status = "Disponível"
                });
                
                WriteColoredLine($"Impressora '{printerName}' adicionada à lista.", ConsoleColor.Green);
            }
            else
            {
                existingPrinter.IsVirtual = true;
                WriteColoredLine($"Impressora '{printerName}' atualizada na lista.", ConsoleColor.Green);
            }
            
            LogMessage($"Configuração de monitoramento de diretório concluída: {pdfMonitorFolder}");
        }

        private static bool IsAdministrator()
        {
            try
            {
                var identity = System.Security.Principal.WindowsIdentity.GetCurrent();
                var principal = new System.Security.Principal.WindowsPrincipal(identity);
                return principal.IsInRole(System.Security.Principal.WindowsBuiltInRole.Administrator);
            }
            catch
            {
                return false;
            }
        }

        private static bool PrinterExists(string printerName)
        {
            try
            {
                Process process = new Process();
                process.StartInfo.FileName = "wmic";
                process.StartInfo.Arguments = "printer where name=\"" + printerName.Replace("\"", "\\\"") + "\" get name";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                
                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();
                
                return output.Contains(printerName);
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao verificar existência da impressora: {ex.Message}");
                return false;
            }
        }

        private static bool CreateVirtualPrinter(string printerName)
        {
            try
            {
                LogMessage("Criando porta para impressora virtual...");
                string portName = "PORTPROMPT:";
                ExecuteCommandWithOutput($"rundll32 printui.dll,PrintUIEntry /ga /n\"{printerName}\" /j\"Monitor de Porta Nula\"");
                
                LogMessage("Tentando criar impressora com driver PDF...");
                if (TryCreateWithPdfDriver(printerName, portName))
                {
                    LogMessage("Impressora virtual criada com driver PDF");
                    return true;
                }
                
                LogMessage("Tentando criar impressora com driver XPS...");
                if (TryCreateWithXpsDriver(printerName, portName))
                {
                    LogMessage("Impressora virtual criada com driver XPS");
                    return true;
                }
                
                LogMessage("Buscando drivers de impressora disponíveis...");
                string availableDriver = GetAvailablePrinterDriver();
                if (!string.IsNullOrEmpty(availableDriver))
                {
                    LogMessage($"Tentando criar impressora com driver: {availableDriver}");
                    if (TryCreateWithDriver(printerName, portName, availableDriver))
                    {
                        LogMessage($"Impressora virtual criada com driver: {availableDriver}");
                        return true;
                    }
                }
                
                LogMessage("Todas as tentativas de criação falharam");
                return false;
            }
            catch (Exception ex)
            {
                LogMessage($"Erro durante criação da impressora: {ex.Message}");
                return false;
            }
        }

        private static string ExecuteCommandWithOutput(string command)
        {
            try
            {
                Process process = new Process();
                process.StartInfo.FileName = "cmd.exe";
                process.StartInfo.Arguments = $"/c {command}";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                
                string output = process.StandardOutput.ReadToEnd();
                string error = process.StandardError.ReadToEnd();
                
                process.WaitForExit();
                
                if (!string.IsNullOrEmpty(output))
                    LogMessage($"Saída do comando: {output.Trim()}");
                    
                if (!string.IsNullOrEmpty(error))
                    LogMessage($"Erro do comando: {error.Trim()}");
                    
                if (process.ExitCode != 0)
                    LogMessage($"Comando concluído com código de saída: {process.ExitCode}");
                    
                return output;
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao executar comando: {ex.Message}");
                return string.Empty;
            }
        }

        private static bool TryCreateWithPdfDriver(string printerName, string portName)
        {
            try
            {
                string driverName = "Microsoft Print To PDF";
                ExecuteCommandWithOutput($"rundll32 printui.dll,PrintUIEntry /if /b \"{printerName}\" /f %windir%\\inf\\ntprint.inf /r \"{portName}\" /m \"{driverName}\"");
                return PrinterExists(printerName);
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao criar com driver PDF: {ex.Message}");
                return false;
            }
        }

        private static bool TryCreateWithXpsDriver(string printerName, string portName)
        {
            try
            {
                string[] xpsDrivers = {
                    "Microsoft XPS Document Writer",
                    "Microsoft XPS Document Writer v4",
                    "Microsoft Software Printer Driver",
                    "Microsoft XPS Document Writer (redirected",
                    "Microsoft Virtual Print Class Driver"
                };
                
                foreach (string driver in xpsDrivers)
                {
                    try
                    {
                        LogMessage($"Tentando com driver: {driver}");
                        ExecuteCommandWithOutput($"rundll32 printui.dll,PrintUIEntry /if /b \"{printerName}\" /f %windir%\\inf\\ntprint.inf /r \"{portName}\" /m \"{driver}\"");
                        if (PrinterExists(printerName))
                            return true;
                    }
                    catch
                    {
                        // Continuar tentando o próximo driver
                    }
                }
                
                return false;
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao criar com drivers XPS: {ex.Message}");
                return false;
            }
        }

        private static bool TryCreateWithDriver(string printerName, string portName, string driverName)
        {
            try
            {
                ExecuteCommandWithOutput($"rundll32 printui.dll,PrintUIEntry /if /b \"{printerName}\" /f %windir%\\inf\\ntprint.inf /r \"{portName}\" /m \"{driverName}\"");
                return PrinterExists(printerName);
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao criar com driver {driverName}: {ex.Message}");
                return false;
            }
        }

        private static string GetAvailablePrinterDriver()
        {
            try
            {
                Process process = new Process();
                process.StartInfo.FileName = "wmic";
                process.StartInfo.Arguments = "printerdriver get name";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                
                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();
                
                string[] lines = output.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                
                // Tentar encontrar drivers úteis primeiro
                string[] preferredDrivers = {
                    "Microsoft Print To PDF",
                    "Microsoft XPS Document Writer",
                    "Generic / Text Only",
                    "Microsoft XPS Document Writer v4"
                };
                
                foreach (string preferredDriver in preferredDrivers)
                {
                    if (lines.Any(line => line.Trim().Contains(preferredDriver)))
                    {
                        return preferredDriver;
                    }
                }
                
                // Se não encontrou nenhum dos preferidos, use o primeiro disponível
                if (lines.Length > 1) // Primeira linha é o cabeçalho
                {
                    return lines[1].Trim();
                }
                
                return string.Empty;
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao obter drivers: {ex.Message}");
                return string.Empty;
            }
        }

        private static void ConfigurePrinters()
        {
            if (!isLoggedIn)
            {
                WriteColoredLine("É necessário fazer login primeiro.", ConsoleColor.Red);
                return;
            }

            if (isMonitoring)
            {
                WriteColoredLine("Pare o monitoramento antes de alterar a configuração.", ConsoleColor.Red);
                return;
            }

            if (availablePrinters.Count == 0)
            {
                WriteColoredLine("Nenhuma impressora encontrada. Atualize a lista primeiro.", ConsoleColor.Yellow);
                return;
            }

            WriteColoredLine("=== CONFIGURAR IMPRESSORAS ===", ConsoleColor.Cyan);
            
            // Selecionar impressora virtual
            List<PrinterInfo> virtualPrinters = availablePrinters.Where(p => p.IsVirtual).ToList();
            if (virtualPrinters.Count == 0)
            {
                WriteColoredLine("Nenhuma impressora virtual encontrada. Crie uma primeiro.", ConsoleColor.Yellow);
                return;
            }

            Console.WriteLine("\nEscolha a impressora virtual para monitorar:");
            for (int i = 0; i < virtualPrinters.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {virtualPrinters[i].Name}");
            }
            
            Console.Write("Escolha (número): ");
            if (int.TryParse(Console.ReadLine(), out int virtualChoice) && 
                virtualChoice >= 1 && virtualChoice <= virtualPrinters.Count)
            {
                // Desmarcar todas as impressoras virtuais
                foreach (var printer in availablePrinters.Where(p => p.IsVirtual))
                {
                    printer.IsSelected = false;
                }
                
                // Marcar a selecionada
                virtualPrinters[virtualChoice - 1].IsSelected = true;
                WriteColoredLine($"Impressora virtual selecionada: {virtualPrinters[virtualChoice - 1].Name}", ConsoleColor.Green);
            }
            else
            {
                WriteColoredLine("Seleção inválida.", ConsoleColor.Red);
                return;
            }

            // Selecionar impressora de destino
            Console.WriteLine("\nEscolha a impressora de destino para redirecionamento:");
            List<PrinterInfo> allPrinters = availablePrinters.ToList();
            for (int i = 0; i < allPrinters.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {allPrinters[i].Name}");
            }
            
            Console.Write("Escolha (número): ");
            if (int.TryParse(Console.ReadLine(), out int targetChoice) && 
                targetChoice >= 1 && targetChoice <= allPrinters.Count)
            {
                // Desmarcar todas as impressoras como destino
                foreach (var printer in availablePrinters)
                {
                    printer.IsRedirectTarget = false;
                }
                
                // Marcar a selecionada
                allPrinters[targetChoice - 1].IsRedirectTarget = true;
                WriteColoredLine($"Impressora de destino selecionada: {allPrinters[targetChoice - 1].Name}", ConsoleColor.Green);
            }
            else
            {
                WriteColoredLine("Seleção inválida.", ConsoleColor.Red);
                return;
            }

            LogMessage("Configuração de impressoras atualizada");
        }

        private static void StartMonitoring()
        {
            if (!isLoggedIn)
            {
                WriteColoredLine("É necessário fazer login primeiro.", ConsoleColor.Red);
                return;
            }

            if (isMonitoring)
            {
                WriteColoredLine("O monitoramento já está ativo.", ConsoleColor.Yellow);
                return;
            }

            // Verificar se as impressoras estão configuradas
            PrinterInfo virtualPrinter = availablePrinters.FirstOrDefault(p => p.IsVirtual && p.IsSelected);
            PrinterInfo redirectPrinter = availablePrinters.FirstOrDefault(p => p.IsRedirectTarget);

            if (virtualPrinter == null || redirectPrinter == null)
            {
                WriteColoredLine("Configure as impressoras antes de iniciar o monitoramento.", ConsoleColor.Red);
                return;
            }

            // Verificar se o diretório de monitoramento existe
            if (!Directory.Exists(pdfMonitorFolder))
            {
                try
                {
                    Directory.CreateDirectory(pdfMonitorFolder);
                    WriteColoredLine($"Diretório de monitoramento criado: {pdfMonitorFolder}", ConsoleColor.Yellow);
                }
                catch (Exception ex)
                {
                    WriteColoredLine($"Erro ao criar diretório de monitoramento: {ex.Message}", ConsoleColor.Red);
                    return;
                }
            }

            isMonitoring = true;
            monitorCancellation = new CancellationTokenSource();
            
            WriteColoredLine($"Iniciando monitoramento: '{virtualPrinter.Name}' -> '{redirectPrinter.Name}'", ConsoleColor.Green);
            LogMessage($"Iniciando monitoramento: '{virtualPrinter.Name}' -> '{redirectPrinter.Name}'");
            
            // Iniciar o watcher para o diretório
            StartFolderWatcher(redirectPrinter.Name);
            
            // Informações importantes para o usuário
            WriteColoredLine("\nCOMO USAR O REDIRECIONAMENTO:", ConsoleColor.Cyan);
            WriteColoredLine($"1. Imprima para a impressora '{virtualPrinter.Name}'", ConsoleColor.White);
            WriteColoredLine($"2. Quando solicitado a salvar o PDF, salve no diretório:", ConsoleColor.White);
            WriteColoredLine($"   {pdfMonitorFolder}", ConsoleColor.Yellow);
            WriteColoredLine($"3. O arquivo será automaticamente detectado e impresso em '{redirectPrinter.Name}'", ConsoleColor.White);
            WriteColoredLine("\nMonitoramento ativo! Aguardando arquivos no diretório...", ConsoleColor.Green);
        }

        private static void StartFolderWatcher(string targetPrinterName)
        {
            try
            {
                // Parar qualquer watcher existente
                if (folderWatcher != null)
                {
                    folderWatcher.EnableRaisingEvents = false;
                    folderWatcher.Dispose();
                }
                
                // Criar novo watcher
                folderWatcher = new FileSystemWatcher(pdfMonitorFolder);
                folderWatcher.NotifyFilter = NotifyFilters.FileName | NotifyFilters.LastWrite;
                folderWatcher.Filter = "*.pdf";
                
                // Configurar evento para novos arquivos
                folderWatcher.Created += (sender, e) => HandleNewPdfFile(e.FullPath, targetPrinterName);
                
                // Iniciar o monitoramento
                folderWatcher.EnableRaisingEvents = true;
                
                LogMessage($"Monitoramento de diretório iniciado: {pdfMonitorFolder}");
                
                // Verificar arquivos existentes no diretório (caso já existam PDFs esperando)
                Task.Run(() => {
                    try
                    {
                        string[] existingFiles = Directory.GetFiles(pdfMonitorFolder, "*.pdf");
                        if (existingFiles.Length > 0)
                        {
                            WriteColoredLine($"Encontrados {existingFiles.Length} arquivos PDF existentes no diretório.", ConsoleColor.Yellow);
                            foreach (string file in existingFiles)
                            {
                                HandleNewPdfFile(file, targetPrinterName);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"Erro ao verificar arquivos existentes: {ex.Message}");
                    }
                });
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro ao iniciar monitoramento de diretório: {ex.Message}", ConsoleColor.Red);
                LogMessage($"Erro ao iniciar monitoramento de diretório: {ex.Message}");
            }
        }

        private static void HandleNewPdfFile(string filePath, string targetPrinterName)
        {
            if (monitorCancellation.IsCancellationRequested)
                return;
                
            try
            {
                // Obter informações do arquivo
                FileInfo fileInfo = new FileInfo(filePath);
                string fileName = Path.GetFileNameWithoutExtension(filePath);
                
                // Verificar se o arquivo está acessível (às vezes arquivos recém-criados estão bloqueados)
                bool fileAccessible = false;
                int retryCount = 0;
                
                while (!fileAccessible && retryCount < 5)
                {
                    try
                    {
                        using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.None))
                        {
                            fileAccessible = true;
                        }
                    }
                    catch
                    {
                        // Arquivo ainda está sendo escrito - aguardar
                        retryCount++;
                        Thread.Sleep(500);
                    }
                }
                
                if (!fileAccessible)
                {
                    WriteColoredLine($"Aviso: Arquivo {fileName} está bloqueado, será ignorado.", ConsoleColor.Yellow);
                    LogMessage($"Arquivo bloqueado: {filePath}");
                    return;
                }
                
                WriteColoredLine($"Novo arquivo PDF detectado: {fileName}, Tamanho: {fileInfo.Length / 1024} KB", ConsoleColor.Cyan);
                LogMessage($"Arquivo detectado: {filePath}, Tamanho: {fileInfo.Length} bytes");
                
                // Estimar número de páginas (não é preciso, mas é uma aproximação)
                int estimatedPages = Math.Max(1, (int)(fileInfo.Length / 30000)); // Estimativa grosseira
                
                // Contar páginas reais - se você tiver alguma biblioteca para isso, pode usar aqui
                int pages = CountPdfPages(filePath);
                if (pages <= 0) pages = estimatedPages;
                
                // Registrar no log
                totalPageCount += pages;
                LogPrintJob(fileName, pages, totalPageCount);
                
                // Imprimir o arquivo
                WriteColoredLine($"Imprimindo arquivo na impressora '{targetPrinterName}'...", ConsoleColor.Yellow);
                bool success = PrintPdfFile(filePath, targetPrinterName);
                
                if (success)
                {
                    WriteColoredLine($"Arquivo '{fileName}' impresso com sucesso!", ConsoleColor.Green);
                    LogMessage($"Impressão concluída: {filePath} -> {targetPrinterName}");
                    
                    // Mover o arquivo para uma pasta "processados" para evitar reprocessamento
                    try
                    {
                        string processedFolder = Path.Combine(pdfMonitorFolder, "processados");
                        if (!Directory.Exists(processedFolder))
                        {
                            Directory.CreateDirectory(processedFolder);
                        }
                        
                        string destinationFile = Path.Combine(processedFolder, $"{fileName}_{DateTime.Now:yyyyMMddHHmmss}.pdf");
                        File.Move(filePath, destinationFile);
                        LogMessage($"Arquivo movido para: {destinationFile}");
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"Erro ao mover arquivo: {ex.Message}");
                        
                        // Se não conseguiu mover, tenta excluir
                        try
                        {
                            File.Delete(filePath);
                            LogMessage("Arquivo original excluído");
                        }
                        catch
                        {
                            LogMessage("Não foi possível excluir o arquivo original");
                        }
                    }
                }
                else
                {
                    WriteColoredLine($"Falha ao imprimir arquivo '{fileName}'", ConsoleColor.Red);
                    LogMessage($"Falha na impressão: {filePath}");
                }
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro ao processar arquivo PDF: {ex.Message}", ConsoleColor.Red);
                LogMessage($"Erro ao processar arquivo: {filePath}, Erro: {ex.Message}");
            }
        }

        // Adicione este método para contar páginas do PDF
        private static int CountPdfPages(string pdfFilePath)
        {
            try
            {
                // Abordagem simples: ler o arquivo como texto e contar padrões que indiquem páginas
                // Não é 100% preciso, mas funciona para estimativas
                byte[] pdfBytes = File.ReadAllBytes(pdfFilePath);
                string pdfText = System.Text.Encoding.ASCII.GetString(pdfBytes);
                
                // Contagem baseada em padrões comuns em arquivos PDF
                int count = 0;
                
                // Método 1: Procurar por "/Type /Page"
                count = CountStringOccurrences(pdfText, "/Type /Page");
                if (count > 0) return count;
                
                // Método 2: Procurar por "<<>>%%Page"
                count = CountStringOccurrences(pdfText, "<<>>%%Page");
                if (count > 0) return count;
                
                // Método 3: Procurar por "/Count "
                int countIndex = pdfText.IndexOf("/Count ");
                if (countIndex >= 0)
                {
                    int numStart = countIndex + 7;
                    int numEnd = numStart;
                    
                    while (numEnd < pdfText.Length && char.IsDigit(pdfText[numEnd]))
                    {
                        numEnd++;
                    }
                    
                    if (numEnd > numStart)
                    {
                        string countStr = pdfText.Substring(numStart, numEnd - numStart);
                        if (int.TryParse(countStr, out int parsedCount) && parsedCount > 0)
                        {
                            return parsedCount;
                        }
                    }
                }
                
                // Retornar estimativa baseada no tamanho
                return Math.Max(1, (int)(pdfBytes.Length / 30000));
            }
            catch
            {
                return 1; // Em caso de erro, assume 1 página
            }
        }

        private static int CountStringOccurrences(string text, string pattern)
        {
            int count = 0;
            int i = 0;
            
            while ((i = text.IndexOf(pattern, i)) != -1)
            {
                count++;
                i += pattern.Length;
            }
            
            return count;
        }

        // Adicione este método para imprimir arquivos PDF
        private static bool PrintPdfFile(string filePath, string printerName)
        {
            try
            {
                // Método 1: Usar o comando de impressão do Windows
                using (Process process = new Process())
                {
                    process.StartInfo.FileName = "cmd.exe";
                    process.StartInfo.Arguments = $"/c print /d:\"{printerName}\" \"{filePath}\"";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.RedirectStandardError = true;
                    process.Start();
                    
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    
                    bool exited = process.WaitForExit(30000); // 30 segundos de timeout
                    
                    if (!string.IsNullOrEmpty(output))
                        LogMessage($"Saída da impressão: {output}");
                    
                    if (!string.IsNullOrEmpty(error))
                        LogMessage($"Erro na impressão: {error}");
                    
                    return exited && process.ExitCode == 0;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao imprimir PDF: {ex.Message}");
                
                // Método alternativo: Tentar com PowerShell
                try
                {
                    string psCommand = $"Out-Printer -Name \"{printerName}\" -InputObject (Get-Content \"{filePath}\")";
                    ExecuteCommandWithOutput($"powershell -Command \"{psCommand}\"");
                    
                    // Assumir sucesso, já que é difícil verificar o resultado do PowerShell
                    return true;
                }
                catch
                {
                    return false;
                }
            }
        }

        private static async Task<bool> RedirectPrintJob(PrintJobInfo job, string targetPrinterName)
        {
            try
            {
                LogMessage($"Iniciando redirecionamento do trabalho ID {job.JobId}: {job.DocumentName}");
                
                // Método 1: Tentar usar SHDocVw.ShellWindows para capturar a caixa de diálogo "Salvar como" do PDF
                // Esta abordagem só funciona se você estiver usando o driver PDF padrão
                // Só funciona se for uma impressora PDF
                if (job.PrinterName.Contains("PDF"))
                {
                    LogMessage("Detectada impressora PDF, tentando interceptar o diálogo de salvamento");
                    
                    // Criar um arquivo temporário para receber o conteúdo
                    string tempPdfFile = Path.Combine(appDataPath, $"temp_pdf_{job.JobId}_{DateTime.Now.Ticks}.pdf");
                    
                    LogMessage($"Arquivo temporário criado: {tempPdfFile}");
                    LogMessage("Aguardando conclusão do diálogo de salvamento... (pode ser necessário clicar 'Salvar')");
                    
                    // Aguardar um tempo para o trabalho ser concluído e o arquivo estar disponível
                    await Task.Delay(1000);
                    
                    // Verificar se o arquivo foi salvo ou se o diálogo ainda está aberto
                    if (File.Exists(tempPdfFile))
                    {
                        LogMessage($"Arquivo temporário encontrado, tamanho: {new FileInfo(tempPdfFile).Length} bytes");
                        
                        // Imprimir o PDF na impressora de destino
                        bool printSuccess = await PrintPdfToDestination(tempPdfFile, targetPrinterName);
                        
                        if (printSuccess)
                        {
                            LogMessage("Impressão redirecionada com sucesso");
                            
                            // Opcionalmente, excluir o arquivo temporário após o redirecionamento
                            try
                            {
                                File.Delete(tempPdfFile);
                                LogMessage("Arquivo temporário excluído");
                            }
                            catch
                            {
                                LogMessage("Não foi possível excluir o arquivo temporário");
                            }
                            
                            return true;
                        }
                        else
                        {
                            LogMessage("Falha ao imprimir na impressora de destino");
                        }
                    }
                    else
                    {
                        LogMessage("Arquivo temporário não encontrado, tentando método alternativo");
                    }
                }
                
                // Método 2: Criar um arquivo de texto simples e imprimir
                LogMessage("Tentando método alternativo: criar arquivo de texto");
                
                // Criar um arquivo de texto com informações do trabalho
                string tempTextFile = Path.Combine(appDataPath, $"redirect_{job.JobId}_{DateTime.Now.Ticks}.txt");
                string content = $"Documento redirecionado: {job.DocumentName}\r\n" +
                                $"Páginas: {job.Pages}\r\n" +
                                $"Impressora original: {job.PrinterName}\r\n" +
                                $"Impressora destino: {targetPrinterName}\r\n" +
                                $"Data/Hora: {DateTime.Now}\r\n\r\n" +
                                $"Este documento foi redirecionado pelo sistema de monitoramento de impressão.";
                
                File.WriteAllText(tempTextFile, content);
                LogMessage($"Arquivo de texto criado: {tempTextFile}");
                
                // Imprimir na impressora de destino
                using (Process process = new Process())
                {
                    process.StartInfo.FileName = "cmd.exe";
                    process.StartInfo.Arguments = $"/c print /d:\"{targetPrinterName}\" \"{tempTextFile}\"";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();
                    
                    // Aguardar a conclusão da impressão (com timeout de 30 segundos)
                    bool exited = process.WaitForExit(30000);
                    
                    if (exited && process.ExitCode == 0)
                    {
                        LogMessage("Redirecionamento bem-sucedido");
                        return true;
                    }
                    else
                    {
                        LogMessage($"Falha no redirecionamento: {(exited ? $"Código de saída {process.ExitCode}" : "Timeout")}");
                    }
                }
                
                // Método 3: Tentar usar PowerShell
                LogMessage("Tentando método alternativo: PowerShell");
                
                ExecuteCommandWithOutput($"powershell -Command \"& {{Get-Content '{tempTextFile}' | Out-Printer -Name '{targetPrinterName}'}}\"");
                
                // Limpar arquivo temporário
                try
                {
                    File.Delete(tempTextFile);
                    LogMessage("Arquivo temporário excluído");
                }
                catch
                {
                    LogMessage("Não foi possível excluir o arquivo temporário");
                }
                
                // Remover o trabalho original
                LogMessage("Tentando remover o trabalho original da fila");
                ExecuteCommandWithOutput($"wmic printjob where ID={job.JobId} call Delete");
                
                return true;
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao redirecionar trabalho: {ex.Message}");
                return false;
            }
        }

        private static async Task<bool> PrintPdfToDestination(string pdfFilePath, string targetPrinterName)
        {
            try
            {
                LogMessage($"Imprimindo PDF {pdfFilePath} na impressora {targetPrinterName}");
                
                // Método 1: Usar SumatraPDF se disponível (silencioso, sem UI)
                string sumatraPath = @"C:\Program Files\SumatraPDF\SumatraPDF.exe";
                if (File.Exists(sumatraPath))
                {
                    LogMessage("Usando SumatraPDF para impressão silenciosa");
                    
                    Process process = new Process();
                    process.StartInfo.FileName = sumatraPath;
                    process.StartInfo.Arguments = $"-print-to \"{targetPrinterName}\" -silent \"{pdfFilePath}\"";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();
                    
                    // Aguardar a conclusão (com timeout)
                    bool exited = await Task.Run(() => process.WaitForExit(30000));
                    
                    if (exited && process.ExitCode == 0)
                    {
                        return true;
                    }
                    
                    LogMessage("Falha ao imprimir com SumatraPDF");
                }
                
                // Método 2: Usar o comando print do Windows
                LogMessage("Tentando impressão com comando print");
                
                using (Process process = new Process())
                {
                    process.StartInfo.FileName = "cmd.exe";
                    process.StartInfo.Arguments = $"/c print /d:\"{targetPrinterName}\" \"{pdfFilePath}\"";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();
                    
                    bool exited = await Task.Run(() => process.WaitForExit(30000));
                    
                    if (exited && process.ExitCode == 0)
                    {
                        return true;
                    }
                    
                    LogMessage("Falha ao imprimir com comando print");
                }
                
                // Método 3: Tentar abrir o arquivo com o aplicativo padrão (terá UI)
                LogMessage("Tentando abrir o PDF para impressão manual");
                
                Process.Start(new ProcessStartInfo
                {
                    FileName = pdfFilePath,
                    UseShellExecute = true
                });
                
                return false;
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao imprimir PDF: {ex.Message}");
                return false;
            }
        }

        // Adicionar esta classe para armazenar informações dos trabalhos de impressão
        public class PrintJobInfo
        {
            public int JobId { get; set; }
            public string DocumentName { get; set; } = "";
            public string PrinterName { get; set; } = "";
            public string Owner { get; set; } = "";
            public string Status { get; set; } = "";
            public int Pages { get; set; } = 1;
            public long Size { get; set; }
        }

        private static List<PrintJobInfo> GetPrintJobs(string printerName)
        {
            List<PrintJobInfo> jobs = new List<PrintJobInfo>();
            
            try
            {
                // Usar WMI para obter trabalhos de impressão
                Process process = new Process();
                process.StartInfo.FileName = "wmic";
                process.StartInfo.Arguments = $"printjob where \"PrinterName like '%{printerName}%'\" get Caption,Document,JobId,JobStatus,Owner,Pages,PagesPrinted,PaperSize,PrinterName,Size,StartTime,Status,TotalPages /format:list";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                
                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();
                
                if (string.IsNullOrWhiteSpace(output) || !output.Contains("Document="))
                {
                    return jobs;
                }
                
                // Divide o output em trabalhos separados (cada trabalho é separado por uma linha em branco)
                string[] jobsData = output.Split(new string[] { "\r\n\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                
                foreach (string jobData in jobsData)
                {
                    if (string.IsNullOrWhiteSpace(jobData)) continue;
                    
                    PrintJobInfo job = new PrintJobInfo();
                    string[] lines = jobData.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                    
                    foreach (string line in lines)
                    {
                        if (line.StartsWith("Document="))
                        {
                            job.DocumentName = line.Substring("Document=".Length).Trim();
                        }
                        else if (line.StartsWith("JobId="))
                        {
                            string jobIdStr = line.Substring("JobId=".Length).Trim();
                            int.TryParse(jobIdStr, out int jobId);
                            job.JobId = jobId;
                        }
                        else if (line.StartsWith("Pages=") || line.StartsWith("TotalPages="))
                        {
                            string pagesStr = line.Substring(line.IndexOf('=') + 1).Trim();
                            if (int.TryParse(pagesStr, out int pages) && pages > 0)
                            {
                                job.Pages = pages;
                            }
                        }
                        else if (line.StartsWith("PrinterName="))
                        {
                            job.PrinterName = line.Substring("PrinterName=".Length).Trim();
                        }
                        else if (line.StartsWith("Owner="))
                        {
                            job.Owner = line.Substring("Owner=".Length).Trim();
                        }
                        else if (line.StartsWith("Status="))
                        {
                            job.Status = line.Substring("Status=".Length).Trim();
                        }
                        else if (line.StartsWith("Size="))
                        {
                            string sizeStr = line.Substring("Size=".Length).Trim();
                            if (long.TryParse(sizeStr, out long size))
                            {
                                job.Size = size;
                            }
                        }
                    }
                    
                    // Validar e adicionar o trabalho
                    if (job.JobId > 0 && !string.IsNullOrWhiteSpace(job.DocumentName))
                    {
                        // Garantir que haja pelo menos 1 página
                        if (job.Pages <= 0)
                        {
                            job.Pages = 1;
                        }
                        
                        jobs.Add(job);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"Erro ao obter trabalhos de impressão: {ex.Message}");
            }
            
            return jobs;
        }

        private static void StopMonitoring()
            {
                if (!isMonitoring)
                {
                    WriteColoredLine("O monitoramento não está ativo.", ConsoleColor.Yellow);
                    return;
                }
                
                WriteColoredLine("Parando monitoramento...", ConsoleColor.Yellow);
                LogMessage("Parando monitoramento...");
                
                // Parar o watcher de diretório
                if (folderWatcher != null)
                {
                    folderWatcher.EnableRaisingEvents = false;
                    folderWatcher.Dispose();
                    folderWatcher = null;
                }
                
                // Cancelar a tarefa de monitoramento
                monitorCancellation?.Cancel();
                
                // Aguardar um pouco para garantir que o monitoramento seja encerrado
                Thread.Sleep(500);
                
                isMonitoring = false;
                WriteColoredLine("Monitoramento interrompido com sucesso.", ConsoleColor.Green);
                LogMessage("Monitoramento interrompido");
            }


        private static void ShowLogFile()
        {
            WriteColoredLine("=== ARQUIVO DE LOG ===", ConsoleColor.Cyan);
            
            if (!File.Exists(logFile))
            {
                WriteColoredLine("Arquivo de log não encontrado.", ConsoleColor.Red);
                return;
            }

            try
            {
                string[] lines = File.ReadAllLines(logFile);
                int count = Math.Min(lines.Length, 20); // Mostrar até 20 linhas mais recentes
                
                WriteColoredLine($"Mostrando {count} linhas mais recentes do arquivo:", ConsoleColor.Yellow);
                Console.WriteLine();
                
                for (int i = lines.Length - count; i < lines.Length; i++)
                {
                    Console.WriteLine(lines[i]);
                }
                
                Console.WriteLine();
                WriteColoredLine($"Arquivo completo em: {logFile}", ConsoleColor.Gray);
                
                // Oferecer opção para abrir o arquivo
                Console.WriteLine("Deseja abrir o arquivo completo? (S/N)");
                if (Console.ReadKey().Key == ConsoleKey.S)
                {
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = logFile,
                        UseShellExecute = true
                    });
                }
            }
            catch (Exception ex)
            {
                WriteColoredLine($"Erro ao ler arquivo de log: {ex.Message}", ConsoleColor.Red);
            }
        }

        private static void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            
            // Se for um console interativo, escrever diretamente
            if (Console.CursorVisible)
            {
                WriteColoredLine($"[{timestamp}] {message}", ConsoleColor.Gray);
            }
            
            // Registrar também no arquivo de log interno (não o de impressões)
            try
            {
                string logDirPath = Path.Combine(appDataPath, "logs");
                if (!Directory.Exists(logDirPath))
                {
                    Directory.CreateDirectory(logDirPath);
                }
                
                string internalLogFile = Path.Combine(logDirPath, $"app_log_{DateTime.Now:yyyyMMdd}.txt");
                File.AppendAllText(internalLogFile, $"[{timestamp}] {message}\r\n");
            }
            catch
            {
                // Ignorar erros ao escrever no log interno
            }
        }

        private static void LogPrintJob(string documentName, int pages, int totalCount)
        {
            try
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string logEntry = $"{timestamp} - Documento: {documentName}, Páginas: {pages}, Total acumulado: {totalCount}";
                
                try
                {
                    // Garantir que o diretório existe
                    if (!Directory.Exists(Path.GetDirectoryName(logFile)))
                    {
                        Directory.CreateDirectory(Path.GetDirectoryName(logFile));
                    }
                    
                    // Escrever no arquivo de log
                    File.AppendAllText(logFile, logEntry + Environment.NewLine);
                    LogMessage($"Log salvo: {pages} páginas de '{documentName}'");
                }
                catch (Exception ex)
                {
                    LogMessage($"Erro ao escrever no log: {ex.Message}");
                    
                    // Tentativa alternativa
                    string altLogFile = Path.Combine(Path.GetTempPath(), "print_log.txt");
                    File.AppendAllText(altLogFile, logEntry + Environment.NewLine);
                    LogMessage($"Log salvo em caminho alternativo: {altLogFile}");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"Erro fatal no registro de log: {ex.Message}");
            }
        }

        private static void WriteColoredLine(string message, ConsoleColor color)
        {
            ConsoleColor originalColor = Console.ForegroundColor;
            Console.ForegroundColor = color;
            Console.WriteLine(message);
            Console.ForegroundColor = originalColor;
        }

        private static string ReadPassword()
        {
            StringBuilder password = new StringBuilder();
            while (true)
            {
                ConsoleKeyInfo key = Console.ReadKey(true);
                if (key.Key == ConsoleKey.Enter)
                {
                    Console.WriteLine();
                    break;
                }
                else if (key.Key == ConsoleKey.Backspace)
                {
                    if (password.Length > 0)
                    {
                        password.Remove(password.Length - 1, 1);
                        Console.Write("\b \b");
                    }
                }
                else if (key.KeyChar != '\u0000') // Ignorar teclas de controle
                {
                    password.Append(key.KeyChar);
                    Console.Write("*");
                }
            }
            return password.ToString();
        }
    }

    // Classes de modelo
    public class PrinterInfo
    {
        public string Name { get; set; }
        public bool IsVirtual { get; set; }
        public string Location { get; set; }
        public string Status { get; set; }
        public bool IsSelected { get; set; }
        public bool IsRedirectTarget { get; set; }
    }
}